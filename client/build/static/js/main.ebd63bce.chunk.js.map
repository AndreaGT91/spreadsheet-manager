{"version":3,"sources":["utils/setAuthToken.js","actions/authActions.js","actions/types.js","pages/Login.js","pages/SignUp.js","pages/ForgotPassword.js","components/NavBar/index.js","utils/API.js","utils/readSpreadsheet.js","pages/Dashboard.js","pages/BaseTable.js","components/private-route/PrivateRoute.js","reducers/authReducers.js","reducers/errorReducers.js","reducers/index.js","store.js","App.js","index.js","images/ac512x512.png","images/android-chrome-192x192.png"],"names":["setAuthToken","token","axios","defaults","headers","common","setCurrentUser","decoded","type","payload","logoutUser","dispatch","localStorage","removeItem","connect","state","auth","errors","loginUser","userData","post","then","res","data","id","name","setItem","JSON","stringify","jwt_decode","catch","err","response","props","useState","email","password","formData","setFormData","history","useHistory","handleChange","event","persist","prevState","target","value","useEffect","isAuthenticated","push","Image","className","style","opacity","src","backgroundImage","alt","Card","Body","textAlign","Form","onSubmit","preventDefault","Group","controlId","Label","Control","placeholder","autoComplete","onChange","error","classnames","invalid","emailnotfound","passwordincorrect","to","float","Button","variant","registerUser","withRouter","firstName","lastName","password2","color","newUser","Row","as","Col","Text","passwordReset","forgotPassword","userName","parse","getItem","Navbar","height","sticky","collapseOnSelect","expand","bg","Brand","href","display","alignItems","Logo","width","Toggle","Collapse","Nav","fontStyle","Link","marginTop","marginBottom","onClick","getOneUser","get","createUser","updateUser","put","getBasesByUser","getBaseByName","createBase","baseData","updateBase","deleteBase","delete","getCustom","baseName","a","this","patch","model","createCustom","baseModel","updateCustom","deleteCustom","getUniqueBaseName","counter","Promise","resolve","reject","newBaseName","ctr","success","API","slice","length","toString","readSpreadsheet","fileName","workbook","reader","FileReader","result","onload","updateHeaderCellObject","nextCell","cell","next","i","test","String","fromCharCode","charCodeAt","substring","t","v","r","h","w","XLSX","read","cellDates","dateNF","SheetNames","worksheet","Sheets","ref","firstRowNum","parseInt","currentCell","startSecondRow","key","trim","replace","jsonData","utils","sheet_to_json","raw","defval","firstDataRow","newField","fieldName","fieldType","substr","match","fn","lastIndexOf","needCap","toUpperCase","newBase","creatorID","baseTitle","status","Error","readAsBinaryString","Dashboard","showAlert","setShowAlert","alertMessage","setAlertMessage","showImport","setShowImport","setFileName","databases","setDatabases","getDBs","handleCloseAlert","Modal","show","onHide","aria-labelledby","centered","Header","closeButton","Title","Footer","justifyContent","File","label","files","console","log","msg","message","statusText","Container","CardColumns","map","base","Date","creationDate","toLocaleDateString","BaseTable","dbName","window","location","pathname","split","dataList","setDataList","updateView","setUpdateView","filterSelect","setFilterSelect","filterData","setFilterData","unfiltered","setUnfiltered","includes","k","Object","keys","startsWith","onColumnClick","colName","dataset","text","dl","sort","b","item1","item2","isNaN","getDataList","header","index","toLowerCase","paddingLeft","forEach","item","Table","responsive","striped","bordered","hover","size","data-text","scope","tabIndex","objData","objKey","Component","component","rest","render","isEmpty","require","initialState","user","loading","combineReducers","action","middleware","thunk","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","currentTime","now","exp","App","exact","path","ReactDOM","document","getElementById","module","exports"],"mappings":"4WAYeA,EAVM,SAAAC,GACbA,EAEAC,IAAMC,SAASC,QAAQC,OAAvB,cAAiDJ,SAG1CC,IAAMC,SAASC,QAAQC,OAAvB,eCsDFC,EAAiB,SAAAC,GAC1B,MAAO,CACHC,KC9DwB,mBD+DxBC,QAASF,IAYJG,EAAa,kBAAM,SAAAC,GAE5BC,aAAaC,WAAW,YACxBD,aAAaC,WAAW,UACxBD,aAAaC,WAAW,YAGxBb,GAAa,GAGbW,EAASL,EAAe,O,iBE+CbQ,eALS,SAAAC,GAAK,MAAK,CAChCC,KAAMD,EAAMC,KACZC,OAAQF,EAAME,UAKd,CAAEC,UFxGqB,SAAAC,GAAQ,OAAI,SAAAR,GACjCT,IACKkB,KAAK,kBAAmBD,GACxBE,MAAK,SAAAC,GAAO,MAGmBA,EAAIC,KAAxBtB,EAHC,EAGDA,MAAOuB,EAHN,EAGMA,GAAIC,EAHV,EAGUA,KAEnBb,aAAac,QAAQ,WAAYC,KAAKC,UAAU3B,IAChDW,aAAac,QAAQ,SAAUC,KAAKC,UAAUJ,IAC9CZ,aAAac,QAAQ,WAAYC,KAAKC,UAAUH,IAGhDzB,EAAaC,GAGb,IAAMM,EAAUsB,IAAW5B,GAG3BU,EAASL,EAAeC,OAE3BuB,OAAM,SAAAC,GAAG,OACNpB,EAAS,CACLH,KCvDU,aDwDVC,QAASsB,EAAIC,SAAST,aE8EvBT,EAxHD,SAACmB,GAAW,IAAD,EACSC,mBAAS,CACvCC,MAAO,GACPC,SAAU,GACVnB,OAAQ,KAJa,mBAChBoB,EADgB,KACNC,EADM,KAOjBC,EAAUC,cAgBhB,SAASC,EAAaC,GACpBA,EAAMC,UAENL,GAAY,SAACM,GAAD,mBAAC,eACRA,GADO,IAEV,CAACF,EAAMG,OAAOrB,IAAKkB,EAAMG,OAAOC,MAChC7B,OAAQ,QApBZ8B,qBAAU,WAEJd,EAAMjB,KAAKgC,iBACbT,EAAQU,KAAK,iBAIjBF,qBAAU,WACRT,GAAY,SAACM,GAAD,mBAAC,eACRA,GADO,IAEV3B,OAAQgB,EAAMhB,cAEf,CAACgB,EAAMhB,SArBa,IA2CfA,EAAWoB,EAAXpB,OAER,OACE,oCACE,kBAACiC,EAAA,EAAD,CACEC,UAAU,iCACVC,MAAO,CAAEC,QAAS,OAClBC,IAAKC,IACLC,IAAI,sBAEN,kBAACC,EAAA,EAAD,CAAMN,UAAU,4BACd,kBAACM,EAAA,EAAKC,KAAN,KACE,wBAAIN,MAAO,CAAEO,UAAW,WAAxB,SACA,6BACA,kBAACC,EAAA,EAAD,CAAMC,SAxBd,SAAsBnB,GACpBA,EAAMoB,iBAEN,IAAM3C,EAAW,CACfgB,MAAOE,EAASF,MAChBC,SAAUC,EAASD,UAErBH,EAAMf,UAAUC,KAkBR,kBAACyC,EAAA,EAAKG,MAAN,CAAYC,UAAU,SACpB,kBAACJ,EAAA,EAAKK,MAAN,cACA,kBAACL,EAAA,EAAKM,QAAN,CACE1D,KAAK,QACL2D,YAAY,cACZC,aAAa,QACbC,SAAU5B,EACVK,MAAOT,EAASF,MAChBmC,MAAOrD,EAAOkB,MACdgB,UAAWoB,IAAW,GAAI,CACxBC,QAASvD,EAAOkB,OAASlB,EAAOwD,kBAGpC,0BAAMtB,UAAU,YACblC,EAAOkB,MACPlB,EAAOwD,gBAIZ,kBAACb,EAAA,EAAKG,MAAN,CAAYC,UAAU,YACpB,kBAACJ,EAAA,EAAKK,MAAN,iBACA,kBAACL,EAAA,EAAKM,QAAN,CACE1D,KAAK,WACL2D,YAAY,WACZC,aAAa,mBACbC,SAAU5B,EACVK,MAAOT,EAASD,SAChBkC,MAAOrD,EAAOmB,SACde,UAAWoB,IAAW,GAAI,CACxBC,QAASvD,EAAOmB,UAAYnB,EAAOyD,sBAGvC,0BAAMvB,UAAU,YACblC,EAAOmB,SACPnB,EAAOyD,oBAIZ,kBAAC,IAAD,CAAMC,GAAG,mBAAT,oBACA,kBAAC,IAAD,CAAMA,GAAG,UAAUvB,MAAO,CAAEwB,MAAO,UAAnC,aACA,6BACA,kBAACC,EAAA,EAAD,CAAQ1B,UAAU,kBAAkB2B,QAAQ,UAAUtE,KAAK,UAA3D,gB,QCgFGM,eALS,SAAAC,GAAK,MAAK,CAChCC,KAAMD,EAAMC,KACZC,OAAQF,EAAME,UAKd,CAAE8D,aH7LwB,SAAC5D,EAAUoB,GAAX,OAAuB,SAAA5B,GAC/CT,IACKkB,KAAK,YAAaD,GAClBE,MAAK,SAAAC,GAAG,OAAIiB,EAAQU,KAAK,aACzBnB,OAAM,SAAAC,GAAG,OACNpB,EAAS,CACLH,KCZU,aDaVC,QAASsB,EAAIC,SAAST,aGoLvBT,CAGbkE,aArLa,SAAC/C,GAAW,IAAD,EACQC,mBAAS,CACvC+C,UAAW,GACXC,SAAU,GACV/C,MAAO,GACPC,SAAU,GACV+C,UAAW,GACXlE,OAAQ,KAPc,mBACjBoB,EADiB,KACPC,EADO,KAUlBC,EAAUC,cAgBhB,SAASC,EAAaC,GACpBA,EAAMC,UAENL,GAAY,SAACM,GAAD,mBAAC,eACRA,GADO,IAEV,CAACF,EAAMG,OAAOrB,IAAKkB,EAAMG,OAAOC,MAChC7B,OAAQ,QApBZ8B,qBAAU,WAEJd,EAAMjB,KAAKgC,iBACbT,EAAQU,KAAK,iBAIjBF,qBAAU,WACRT,GAAY,SAACM,GAAD,mBAAC,eACRA,GADO,IAEV3B,OAAQgB,EAAMhB,cAEf,CAACgB,EAAMhB,SAxBc,IAkDhBA,EAAWoB,EAAXpB,OAER,OACE,oCACE,kBAACiC,EAAA,EAAD,CACEC,UAAU,iCACVC,MAAO,CAAEC,QAAS,OAClBC,IAAKC,IACLC,IAAI,sBAEN,kBAACC,EAAA,EAAD,CAAMN,UAAU,4BACd,kBAACM,EAAA,EAAKC,KAAN,KACE,kBAAC,IAAD,CAAMiB,GAAG,SAASvB,MAAO,CAAEwB,MAAO,QAASQ,MAAO,UAAlD,KACA,wBAAIhC,MAAO,CAAEO,UAAW,WAAxB,WACA,6BACA,kBAACC,EAAA,EAAD,CAAMC,SA7Bd,SAAsBnB,GACpBA,EAAMoB,iBAEN,IAAMuB,EAAU,CACdJ,UAAW5C,EAAS4C,UACpBC,SAAU7C,EAAS6C,SACnB/C,MAAOE,EAASF,MAChBC,SAAUC,EAASD,SACnB+C,UAAW9C,EAAS8C,WAGtBlD,EAAM8C,aAAaM,EAASpD,EAAMM,WAmB5B,kBAACqB,EAAA,EAAK0B,IAAN,KACI,kBAAC1B,EAAA,EAAKG,MAAN,CAAYwB,GAAIC,IAAKxB,UAAU,aAC7B,kBAACJ,EAAA,EAAKK,MAAN,mBACA,kBAACL,EAAA,EAAKM,QAAN,CACE1D,KAAK,YACL2D,YAAY,aACZC,aAAa,QACbC,SAAU5B,EACVK,MAAOT,EAAS4C,UAChBX,MAAOrD,EAAOgE,UACd9B,UAAWoB,IAAW,GAAI,CACxBC,QAASvD,EAAOgE,cAGpB,0BAAM9B,UAAU,YAAYlC,EAAOgE,YAGrC,kBAACrB,EAAA,EAAKG,MAAN,CAAYwB,GAAIC,IAAKxB,UAAU,YAC7B,kBAACJ,EAAA,EAAKK,MAAN,kBACA,kBAACL,EAAA,EAAKM,QAAN,CACE1D,KAAK,WACL2D,YAAY,YACZC,aAAa,QACbC,SAAU5B,EACVK,MAAOT,EAAS6C,SAChBZ,MAAOrD,EAAOiE,SACd/B,UAAWoB,IAAW,GAAI,CACxBC,QAASvD,EAAOiE,aAGpB,0BAAM/B,UAAU,YAAYlC,EAAOiE,YAIvC,kBAACtB,EAAA,EAAK0B,IAAN,KACE,kBAAC1B,EAAA,EAAKG,MAAN,CAAYwB,GAAIC,IAAKxB,UAAU,SAC7B,kBAACJ,EAAA,EAAKK,MAAN,cACA,kBAACL,EAAA,EAAKM,QAAN,CACE1D,KAAK,QACL2D,YAAY,cACZE,SAAU5B,EACV2B,aAAa,QACbtB,MAAOT,EAASF,MAChBmC,MAAOrD,EAAOkB,MACdgB,UAAWoB,IAAW,GAAI,CACxBC,QAASvD,EAAOkB,UAGpB,0BAAMgB,UAAU,YAAYlC,EAAOkB,OACnC,kBAACyB,EAAA,EAAK6B,KAAN,CAAWtC,UAAU,cAArB,oDAMJ,kBAACS,EAAA,EAAK0B,IAAN,KACE,kBAAC1B,EAAA,EAAKG,MAAN,CAAYwB,GAAIC,IAAKxB,UAAU,YAC7B,kBAACJ,EAAA,EAAKK,MAAN,iBACA,kBAACL,EAAA,EAAKM,QAAN,CACE1D,KAAK,WACL2D,YAAY,WACZC,aAAa,eACbC,SAAU5B,EACVK,MAAOT,EAASD,SAChBkC,MAAOrD,EAAOmB,SACde,UAAWoB,IAAW,GAAI,CACxBC,QAASvD,EAAOmB,aAGpB,0BAAMe,UAAU,YAAYlC,EAAOmB,YAIvC,kBAACwB,EAAA,EAAK0B,IAAN,KACE,kBAAC1B,EAAA,EAAKG,MAAN,CAAYwB,GAAIC,IAAKxB,UAAU,aAC7B,kBAACJ,EAAA,EAAKK,MAAN,yBACA,kBAACL,EAAA,EAAKM,QAAN,CACE1D,KAAK,WACL2D,YAAY,mBACZC,aAAa,eACbC,SAAU5B,EACVK,MAAOT,EAAS8C,UAChBb,MAAOrD,EAAOkE,UACdhC,UAAWoB,IAAW,GAAI,CACxBC,QAASvD,EAAOkE,cAGpB,0BAAMhC,UAAU,YAAYlC,EAAOkE,aAGvC,6BACA,kBAACN,EAAA,EAAD,CAAQ1B,UAAU,kBAAkB2B,QAAQ,UAAUtE,KAAK,UAA3D,0BCvBGM,eALS,SAAAC,GAAK,MAAK,CAChCC,KAAMD,EAAMC,KACZC,OAAQF,EAAME,UAKd,CAAEyE,cJpIyB,SAACvE,EAAUoB,GAAX,OAAuB,SAAA5B,GAChDT,IACKkB,KAAK,2BAA4BD,GACjCE,MAAK,SAAAC,GAAG,OAAIiB,EAAQU,KAAK,aACzBnB,OAAM,SAAAC,GAAG,OACNpB,EAAS,CACLH,KCzBU,aD0BVC,QAASsB,EAAIC,SAAST,aI2HvBT,CAGbkE,aA1IqB,SAAC/C,GAAW,IAAD,EACAC,mBAAS,CACvCC,MAAO,GACPC,SAAU,GACV+C,UAAW,GACXlE,OAAQ,KALsB,mBACzBoB,EADyB,KACfC,EADe,KAQ1BC,EAAUC,cAgBhB,SAASC,EAAaC,GACpBA,EAAMC,UAENL,GAAY,SAACM,GAAD,mBAAC,eACRA,GADO,IAEV,CAACF,EAAMG,OAAOrB,IAAKkB,EAAMG,OAAOC,MAChC7B,OAAQ,QApBZ8B,qBAAU,WAEJd,EAAMjB,KAAKgC,iBACbT,EAAQU,KAAK,iBAIjBF,qBAAU,WACRT,GAAY,SAACM,GAAD,mBAAC,eACRA,GADO,IAEV3B,OAAQgB,EAAMhB,cAEf,CAACgB,EAAMhB,SAtBsB,IA8CxBA,EAAWoB,EAAXpB,OAER,OACE,oCACE,kBAACiC,EAAA,EAAD,CACEC,UAAU,iCACVC,MAAO,CAAEC,QAAS,OAClBC,IAAKC,IACLC,IAAI,sBAEN,kBAACC,EAAA,EAAD,CAAMN,UAAU,4BACd,kBAACM,EAAA,EAAKC,KAAN,KACE,kBAAC,IAAD,CAAMiB,GAAG,SAASvB,MAAO,CAAEwB,MAAO,QAASQ,MAAO,UAAlD,KACA,wBAAIhC,MAAO,CAAEO,UAAW,WAAxB,kBACA,6BACA,kBAACC,EAAA,EAAD,CAAMC,SA3Bd,SAAsBnB,GACpBA,EAAMoB,iBAEN,IAAM6B,EAAiB,CACrBxD,MAAOE,EAASF,MAChBC,SAAUC,EAASD,SACnB+C,UAAW9C,EAAS8C,WAGtBlD,EAAMyD,cAAcC,EAAgB1D,EAAMM,WAmBlC,kBAACqB,EAAA,EAAKG,MAAN,CAAYC,UAAU,SACpB,kBAACJ,EAAA,EAAKK,MAAN,cACA,kBAACL,EAAA,EAAKM,QAAN,CACE1D,KAAK,QACL2D,YAAY,cACZC,aAAa,QACbC,SAAU5B,EACVK,MAAOT,EAASF,MAChBmC,MAAOrD,EAAOkB,MACdgB,UAAWoB,IAAW,GAAI,CACxBC,QAASvD,EAAOkB,OAASlB,EAAOwD,kBAGpC,0BAAMtB,UAAU,YACblC,EAAOkB,MACPlB,EAAOwD,gBAIZ,kBAACb,EAAA,EAAKG,MAAN,CAAYC,UAAU,YACpB,kBAACJ,EAAA,EAAKK,MAAN,iBACA,kBAACL,EAAA,EAAKM,QAAN,CACE1D,KAAK,WACL2D,YAAY,WACZC,aAAa,mBACbC,SAAU5B,EACVK,MAAOT,EAASD,SAChBkC,MAAOrD,EAAOmB,SACde,UAAWoB,IAAW,GAAI,CACxBC,QAASvD,EAAOmB,aAGpB,0BAAMe,UAAU,YAAYlC,EAAOmB,WAGrC,kBAACwB,EAAA,EAAKG,MAAN,CAAYC,UAAU,aACpB,kBAACJ,EAAA,EAAKK,MAAN,yBACA,kBAACL,EAAA,EAAKM,QAAN,CACE1D,KAAK,WACL2D,YAAY,mBACZC,aAAa,eACbC,SAAU5B,EACVK,MAAOT,EAAS8C,UAChBb,MAAOrD,EAAOkE,UACdhC,UAAWoB,IAAW,GAAI,CACxBC,QAASvD,EAAOkE,cAGpB,0BAAMhC,UAAU,YAAYlC,EAAOkE,YAGrC,6BACA,kBAACN,EAAA,EAAD,CAAQ1B,UAAU,kBAAkB2B,QAAQ,UAAUtE,KAAK,UAA3D,yB,6FC7DZ,IAIeM,eAJS,SAAAC,GAAK,MAAK,CAChCC,KAAMD,EAAMC,QAG0B,CAAEN,cAA3BI,EA5Df,SAAgBmB,GACd,IAAM2D,EAAWjE,KAAKkE,MAAMjF,aAAakF,QAAQ,aAE3CvD,EAAUC,cAchB,OANAO,qBAAU,WACHd,EAAMjB,KAAKgC,iBACdT,EAAQU,KAAK,YAEd,CAACV,EAASN,EAAMjB,KAAKgC,kBAGtB,oCAEE,kBAAC+C,EAAA,EAAD,CAAQ3C,MAAO,CAAE4C,OAAQ,OAASC,OAAO,MAAMC,kBAAgB,EAACC,OAAO,KAAKC,GAAG,OAAOtB,QAAQ,QAC5F,kBAACiB,EAAA,EAAOM,MAAR,CAAcC,KAAK,aAAanD,UAAU,eAAeC,MAAO,CAAEmD,QAAS,OAAQC,WAAY,WAC7F,yBACElD,IAAKmD,IACLC,MAAM,KACNV,OAAO,KACP7C,UAAU,2BACVK,IAAI,uBASR,kBAACuC,EAAA,EAAOY,OAAR,MACA,kBAACZ,EAAA,EAAOa,SAAR,CAAiBzD,UAAU,uBACzB,kBAAC0D,EAAA,EAAD,CAAK1D,UAAU,WACb,kBAAC4C,EAAA,EAAON,KAAR,CAAarC,MAAO,CAAE0D,UAAW,WAAjC,YACYlB,GAEZ,kBAACiB,EAAA,EAAIE,KAAL,CAAUT,KAAK,aAAalD,MAAO,CAAE4D,UAAW,OAAQC,aAAc,SAAtE,aACA,kBAACJ,EAAA,EAAIE,KAAL,CAAU3D,MAAO,CAAE4D,UAAW,OAAQC,aAAc,QAAUC,QAtCxE,SAA2BxE,GACzBA,EAAMoB,iBACN7B,EAAMvB,aACN6B,EAAQU,KAAK,YAmCL,iBCpDG,GAEbkE,WAAY,SAAShF,GACnB,OAAOjC,IAAMkH,IAAI,aAAejF,IAGlCkF,WAAY,SAASlG,GACnB,OAAOjB,IAAMkB,KAAK,YAAaD,IAGjCmG,WAAY,SAASnG,GACnB,OAAOjB,IAAMqH,IAAI,YAAapG,IAGhCqG,eAAgB,SAAShG,GACvB,OAAOtB,IAAMkH,IAAI,gBAAkB5F,IAGrCiG,cAAe,SAAShG,GACtB,OAAOvB,IAAMkH,IAAI,kBAAoB3F,IAGvCiG,WAAY,SAASC,GACnB,OAAOzH,IAAMkB,KAAK,YAAauG,IAGjCC,WAAY,SAASD,GACnB,OAAOzH,IAAMqH,IAAI,YAAaI,IAGhCE,WAAY,SAASpG,GACnB,OAAOvB,IAAM4H,OAAO,kBAAoBrG,IAG1CsG,UAAU,WAAD,4BAAE,WAAeC,GAAf,iBAAAC,EAAA,sEACcC,KAAKT,cAAcO,GADjC,YACHhG,EADG,QAEMT,KAFN,uBAGCD,EAAMpB,IAAMiI,MAAM,eAAiBH,EAAUhG,EAAST,KAAK6G,OAH5D,kBAIE9G,GAJF,gCAMO,IANP,gDAAF,mDAAC,GASV+G,aAAc,SAASL,EAAUM,EAAWX,GAC1C,OAAOzH,IAAMkB,KAAK,eAAiB4G,EAAU,CAAEI,MAAOE,EAAW/G,KAAMoG,KAGzEY,aAAa,WAAD,4BAAE,WAAeP,EAAUL,GAAzB,eAAAM,EAAA,sEACWC,KAAKT,cAAcO,GAD9B,WACNhG,EADM,QAEET,KAFF,yCAEiBS,GAFjB,gCAGL9B,IAAMqH,IAAI,eAAiBS,EAAU,CAAEI,MAAOpG,EAAST,KAAK6G,MAAO7G,KAAMoG,KAHpE,gDAAF,qDAAC,GAMba,aAAa,WAAD,4BAAE,WAAeR,EAAUxG,GAAzB,eAAAyG,EAAA,sEACWC,KAAKT,cAAcO,GAD9B,WACNhG,EADM,QAEET,KAFF,yCAEiBS,GAFjB,gCAGL9B,IAAMiI,MAAM,eAAiBH,EAAW,IAAMxG,EAAIQ,EAAST,KAAK6G,QAH3D,gDAAF,qDAAC,I,iBClDTK,EAAiB,uCAAG,WAAeT,EAAUU,GAAzB,SAAAT,EAAA,+EACjB,IAAIU,QAAJ,uCAAY,WAAeC,EAASC,GAAxB,mBAAAZ,EAAA,6DACba,EAAcd,EACde,EAAML,EACNM,GAAU,EAHG,kBAMTC,EAAIxB,cAAcqB,GACvBzH,KADK,uCACC,WAAMW,GAAN,SAAAiG,EAAA,0DACDjG,EAAST,KADR,uBAGCwH,EAAM,IACRD,EAAcA,EAAYI,MAAM,EAAGJ,EAAYK,OAAS,IAG1DJ,IACAD,GAA6BC,EAAKK,WAR/B,SASGX,EAAkBK,EAAaC,GACpC1H,MAAK,SAAAW,GACJ8G,EAAc9G,KAXb,kDADD,uDANS,uDAwBfgH,GAAU,EACVH,EAAO,EAAD,IAzBS,yBA4BXG,GACFJ,EAAQE,GA7BK,oFAAZ,0DADiB,2CAAH,wDAsORO,EAjMM,uCAAG,WAAeC,GAAf,SAAArB,EAAA,+EACf,IAAIU,SAAQ,SAACC,EAASC,GAC3B,IAEIU,EAFAC,EAAS,IAAIC,WACbT,GAAU,EAEVU,EAAS,GAGbF,EAAOG,OAAP,uCAAgB,WAAejH,GAAf,IAGLkH,EAKAC,EARK,yCAAA5B,EAAA,yDAQL4B,EARK,SAQIC,GAGhB,IAFA,IAAIC,EAAO,GAEFC,EAAGF,EAAKX,OAAO,EAAIa,GAAK,EAAGA,IAClC,GAAI,KAAKC,KAAKH,EAAKE,IACjBD,EAAOD,EAAKE,GAAKD,MAEd,IAAgB,MAAZD,EAAKE,GAMT,CACHD,EAAOG,OAAOC,aAAaL,EAAKM,WAAWJ,GAAK,GAAKD,EACjDC,EAAI,IACND,EAAOD,EAAKO,UAAU,EAAEL,GAAKD,GAE/B,MAVAA,EAAO,IAAMA,EACH,IAANC,IACFD,EAAO,IAAMA,GAWnB,OAAOA,GA1BAH,EAHK,SAGkB9G,GAC9B,MAAO,CAAEwH,EAAG,IAAKC,EAAGzH,EAAO0H,EAAG,MAAQ1H,EAAQ,OAAQ2H,EAAG3H,EAAO4H,EAAG5H,IAJvD,YAkCZyG,EAAWoB,IAAKC,KAAKlI,EAAMG,OAAO6G,OAAQ,CAAClJ,KAAM,SAAUqK,WAAW,EAAMC,OAAO,oBAItEC,WAAW5B,OAAS,GAtCrB,iBAuCJ6B,EAAYzB,EAAS0B,OAAO1B,EAASwB,WAAW,IAGhDG,EAAMF,EAAU,QAClBhB,EAAI,EACJmB,EAAeC,SAASF,EAAIb,UAAU,IACtCgB,EAAcH,EAAI,GAAKC,EAAY/B,WACnCkC,EAAiBJ,EAAI,IAAMC,EAAc,GAAG/B,WA9CtC,OAAAnB,EAAA,KAmDM+C,GAnDN,mDAmDDO,EAnDC,cAoDID,EApDJ,wDAqDO,MAAXC,EAAI,GArDA,wDAwDJA,IAAQF,IACVL,EAAUK,GAAezB,EAAuB,SAAWI,EAAEZ,YAC7DiC,EAAcxB,EAASwB,IAIO,KAA5BL,EAAUO,GAAKhB,EAAEiB,OACnBR,EAAUO,GAAO3B,EAAuB,SAAWI,EAAEZ,aAGrD4B,EAAUO,GAAO3B,EAAuBoB,EAAUO,GAAKhB,EAAEkB,QAAQ,MAAO,IAAID,QAEhD,MAAxBR,EAAUO,GAAKhB,EAAE,KACnBS,EAAUO,GAAO3B,EAAuBoB,EAAUO,GAAKhB,EAAEF,UAAU,MAIvEL,IACAqB,EAAcxB,EAASwB,GA1Ef,8BA8ENK,EAAWf,IAAKgB,MAAMC,cAAcZ,EAAW,CAAEa,KAAI,EAAOC,OAAO,MAG1D3C,OAAS,GAjFZ,iBAuFR,IAASoC,KALLQ,EAAeL,EAAS,GACxBpD,EAAY,GAIAyD,EACdC,EAAW,CAAEC,UAAWV,EAAKW,UAAW,UAGpCH,EAAaR,KACkB,kBAAtBQ,EAAaR,GACtBS,EAASE,UAAY,SAEgB,kBAAtBH,EAAaR,IACrBQ,EAAaR,GAAKY,OAAO,EAAE,IAAIC,MAAM,yBAC5CJ,EAASE,UAAY,SAIzB5D,EAAUrF,KAAK+I,GAUjB,IAJIK,EAAK/C,EAAS7H,KAAK4I,UAAU,EAAGf,EAAS7H,KAAK6K,YAAY,MAC1DxD,EAAc,GACdyD,GAAU,EAELvC,EAAE,EAAGA,EAAEqC,EAAGlD,OAAQa,IAErB,UAAUC,KAAKoC,EAAGrC,KAEQ,IAAvBlB,EAAYK,QAAkB,MAAMc,KAAKoC,EAAGrC,MAC/ClB,EAAc,KAGZyD,GACFzD,GAA4BuD,EAAGrC,GAAGwC,cAClCD,GAAU,GAGVzD,GAA4BuD,EAAGrC,IAIjCuC,GAAU,EAhIN,iBAoIF9D,EAAkBK,EAAa,GACpCzH,KADK,uCACC,WAAMW,GAAN,eAAAiG,EAAA,6DACCwE,EAAU,CACdC,UAAW/K,KAAKkE,MAAMjF,aAAakF,QAAQ,WAC3CkC,SAAUhG,EACV2K,UAAWN,EACXjE,MAAOE,GALJ,SASCW,EAAIvB,WAAW+E,GACpBpL,MAAK,WACJ,OAAO4H,EAAIZ,aAAaoE,EAAQzE,SAAUyE,EAAQrE,MAAOsD,MAE1DrK,MAAK,WAAQqI,EAAS+C,EAAQzE,YAC9BlG,MALK,uCAKE,WAAMwC,GAAN,eAAA2D,EAAA,yDAEwB,MAA1B3D,EAAMtC,SAAS4K,OAFb,gBAGJ,IAAS5C,EAAE,EAAGA,EAAE0B,EAASvC,OAAQa,IAC/Bf,EAAIZ,aAAaoE,EAAQzE,SAAUyE,EAAQrE,MAAOsD,EAAS1B,IAJzD,sCAQEf,EAAIpB,WAAW4E,EAAQzE,UAC5B3G,MAAK,WAAQ,MAAMiD,KAThB,kDALF,uDATD,2CADD,uDApIE,sCAkKF,IAAIuI,MAAM,qCAlKR,sCAsKJ,IAAIA,MAAM,0BAtKN,0DA0KZ7D,GAAU,EACVH,EAAO,EAAD,IA3KM,yBA8KRG,GACFJ,EAAQc,GA/KE,qFAAhB,sDAqLAF,EAAOsD,mBAAmBxD,OA7LN,2CAAH,sDC2HNyD,EA3JG,WAAO,IAAD,EACY7K,oBAAS,GADrB,mBACf8K,EADe,KACJC,EADI,OAEkB/K,mBAAS,IAF3B,mBAEfgL,EAFe,KAEDC,EAFC,OAGcjL,oBAAS,GAHvB,mBAGfkL,EAHe,KAGHC,EAHG,OAIUnL,mBAAS,MAJnB,mBAIfoH,EAJe,KAILgE,EAJK,OAKYpL,mBAAS,CAAC,CAAE8F,SAAU,aALlC,mBAKfuF,EALe,KAKJC,EALI,cAWPC,IAXO,2EAWtB,sBAAAxF,EAAA,sEACQgB,EAAIzB,eAAe7F,KAAKkE,MAAMjF,aAAakF,QAAQ,YACtDzE,MAAK,SAAAW,GACJwL,EAAaxL,EAAST,SAEvBO,OAAM,WAAQ,MAAO,MAL1B,4CAXsB,sBAOtBiB,qBAAU,WACR0K,MACC,IAUH,IAAMC,EAAmB,WACvBP,EAAgB,IAChBF,GAAa,IA+Cf,OACE,oCACE,kBAAC,EAAD,MACA,kBAAC/J,EAAA,EAAD,CACEC,UAAU,iCACVC,MAAO,CAAEC,QAAS,OAClBC,IAAKC,IACLC,IAAI,sBAIN,kBAACmK,EAAA,EAAD,CACEC,KAAMZ,EACNa,OAAQH,EACRI,kBAAgB,cAChBC,UAAQ,EACR3K,MAAO,CAAEC,QAAS,IAElB,kBAACsK,EAAA,EAAMK,OAAP,CAAcC,aAAW,GACvB,kBAACN,EAAA,EAAMO,MAAP,6BAEF,kBAACP,EAAA,EAAMjK,KAAP,KAAawJ,GACb,kBAACS,EAAA,EAAMQ,OAAP,CAAc/K,MAAO,CAAEmD,QAAS,OAAQ6H,eAAgB,WACtD,kBAACvJ,EAAA,EAAD,CAAQC,QAAQ,UAAUoC,QAASwG,GAAnC,WAOJ,kBAACC,EAAA,EAAD,CACEC,KAAMR,EACNS,OA3EoB,WACxBP,EAAY,MACZD,GAAc,IA0EVS,kBAAgB,eAChBC,UAAQ,EACR3K,MAAO,CAAEC,QAAS,IAElB,kBAACsK,EAAA,EAAMK,OAAP,CAAcC,aAAW,GACvB,kBAACN,EAAA,EAAMO,MAAP,CAAa1M,GAAG,gBAAhB,uBAEF,kBAACmM,EAAA,EAAMjK,KAAP,KACE,kBAACE,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKG,MAAN,KACE,kBAACH,EAAA,EAAKyK,KAAN,CAAW7M,GAAG,uBAAuB8M,MAAM,wBAAwBjK,SAjDxD,SAAC3B,GAClBA,EAAMG,OAAO0L,MAAMpF,OAAS,GAC9BmE,EAAY5K,EAAMG,OAAO0L,MAAM,UAmD7B,kBAACZ,EAAA,EAAMQ,OAAP,CAAc/K,MAAO,CAAEmD,QAAS,OAAQ6H,eAAgB,WACtD,kBAACvJ,EAAA,EAAD,CAAQC,QAAQ,UAAUoC,QAtFT,WACvBmG,GAAc,GAEV/D,EACFD,EAAgBC,GACbjI,MAAK,SAAAW,GACJyL,OAED3L,OAAM,SAAAwC,GACLkK,QAAQC,IAAI,uBAAwBnK,GAGpC,IAAIoK,EAAM,GACNpK,EAAMqK,QACRD,EAAM,KAAOpK,EAAMqK,QAEXrK,EAAMtC,UAAcsC,EAAMtC,SAAS4M,aAC3CF,EAAM,KAAOpK,EAAMtC,SAAS4M,YAG9BzB,EAAgB,mBAAqB7D,EAAS7H,KAAOiN,GACrDzB,GAAa,OAIjBE,EAAgB,qBAChBF,GAAa,IAGfK,EAAY,QAyDN,YAMJ,kBAACuB,EAAA,EAAD,CAAW1L,UAAU,kBAAkBC,MAAO,CAAE4D,UAAW,OAAQN,MAAO,QACxE,kBAACpB,EAAA,EAAD,KACE,kBAACE,EAAA,EAAD,KACE,wBAAIrC,UAAU,cAAd,mBAEF,kBAACqC,EAAA,EAAD,KACE,kBAACX,EAAA,EAAD,CACE1B,UAAU,cACV2B,QAAQ,UACR1B,MAAO,CAAE4D,UAAW,QACpBE,QA5Ga,kBAAMmG,GAAc,KAwGnC,YASJ,kBAACyB,EAAA,EAAD,KACGvB,EAAUwB,KAAI,SAAAC,GAAI,OACjB,kBAACvL,EAAA,EAAD,CAAM8H,IAAKyD,EAAKhH,SAAU7E,UAAU,MAAMiD,GAAG,QAC3C,kBAAC3C,EAAA,EAAKsD,KAAN,CAAWT,KAAI,qBAAgB0I,EAAKhH,UAAY5E,MAAO,CAAEgC,MAAM,UAC7D,kBAAC3B,EAAA,EAAKyK,MAAN,CAAY/K,UAAU,oBAAoB6L,EAAKrC,WAC/C,kBAAClJ,EAAA,EAAKgC,KAAN,CAAWtC,UAAU,uBAAuB6L,EAAKhH,UACjD,kBAACvE,EAAA,EAAKgC,KAAN,CAAWtC,UAAU,mCAArB,eACgB,IAAI8L,KAAKD,EAAKE,cAAeC,+B,SCoB9CC,G,OArKG,WAChB,IAAMC,EAASC,OAAOC,SAASC,SAASC,MAAM,KAAK,GAD7B,EAEUvN,mBAAS,IAFnB,mBAEfwN,EAFe,KAELC,EAFK,OAIczN,mBAAS,GAJvB,mBAIf0N,EAJe,KAIHC,EAJG,OAQkB3N,mBADvB,aAPK,mBAQf4N,EARe,KAQDC,EARC,OASc7N,mBAAS,IATvB,mBASf8N,EATe,KASHC,EATG,OAUc/N,mBAAS,IAVvB,mBAUfgO,EAVe,KAUHC,EAVG,KAalB/P,EAAU,GACd,IAAK,IAAImL,KAAOmE,EAAS,GAClBnE,EAAI6E,SAAS,WAChBhQ,EAAQ6C,KAAKsI,GAhBK,4CAwBtB,WAA2BvD,GAA3B,SAAAC,EAAA,sEACQgB,EAAIlB,UAAUC,GACjB3G,MAAK,SAAAW,GACJ,IAAK,IAAIgI,EAAI,EAAGA,EAAIhI,EAAST,KAAK4H,OAAQa,IACxC,IAAK,IAAIqG,EAAI,EAAGA,EAAIC,OAAOC,KAAKvO,EAAST,KAAKyI,IAAIb,OAAQkH,IACxD,GAAIC,OAAOC,KAAKvO,EAAST,KAAKyI,IAAIqG,GAAGG,WAAW,KAAM,CACpD,IAAIjF,EAAM+E,OAAOC,KAAKvO,EAAST,KAAKyI,IAAIqG,UAEjCrO,EAAST,KAAKyI,GAAGuB,GAK9BoE,EAAY3N,EAAST,MACrB4O,EAAcnO,EAAST,SAExBO,OAAM,WAAQ,MAAO,MAhB1B,4CAxBsB,sBA2CtB,SAAS2O,EAAc/N,GACrB,IAAMgO,EAAUhO,EAAMG,OAAO8N,QAAQC,KAC/BC,EAAKnB,EAaXmB,EAAGC,MAAK,SAAC7I,EAAG8I,GAAQ,OAXEC,EAWkB/I,EAAEyI,GAXbO,EAWuBF,EAAEL,GAV/CQ,MAAMF,KACTA,EAAQ5F,SAAS4F,GACjBC,EAAQ7F,SAAS6F,IAGfD,EAAQC,GAAiB,EACpBD,EAAQC,EAAgB,EACnB,EARhB,IAAsBD,EAAOC,KAa7BtB,EAAYkB,GACZhB,EAAcD,EAAa,GAiC7B,OA1EA7M,qBAAU,YApBY,oCAqBpBoO,CAAY9B,KACX,CAACA,IAyEF,oCACE,kBAAC,EAAD,MACA,kBAACnM,EAAA,EAAD,CACEC,UAAU,iCACVC,MAAO,CAAEC,QAAS,OAClBC,IAAKC,IACLC,IAAI,sBAGN,kBAACqL,EAAA,EAAD,CAAW1L,UAAU,4BAA4BC,MAAO,CAAE4D,UAAW,OAAQN,MAAO,QAClF,wBAAIvD,UAAU,MAAMkM,GACpB,0BAAMjM,MAAO,CAAEmD,QAAS,SAAWqJ,GAEnC,kBAACnM,EAAA,EAAD,CAAMN,UAAU,wBACd,kBAACM,EAAA,EAAKC,KAAN,KACE,kBAACE,EAAA,EAAD,KACE,wBAAIR,MAAO,CAAE6D,aAAc,SAA3B,eACA,kBAACrD,EAAA,EAAK0B,IAAN,KACE,kBAAC1B,EAAA,EAAKG,MAAN,CAAYwB,GAAIC,IAAKxB,UAAU,4BAC7B,kBAACJ,EAAA,EAAKK,MAAN,6BACA,kBAACL,EAAA,EAAKM,QAAN,CAAcqB,GAAG,SAASlB,SAlD1C,SAA4B3B,GAC1BqN,EAAgBrN,EAAMG,OAAOC,QAiDyCM,MAAO,CAAE4C,OAAQ,SACvE,4BAAQuF,IAAK,EAAGzI,MA7GjB,0BA8GE1C,EAAQ2O,KAAI,SAACqC,EAAQC,GAAT,OACX,4BAAQ9F,IAAK8F,EAAQ,EAAGvO,MAAOsO,GAASA,QAI9C,kBAACxN,EAAA,EAAKG,MAAN,CAAYwB,GAAIC,IAAKxB,UAAU,2BAC7B,kBAACJ,EAAA,EAAKK,MAAN,4BACA,kBAACL,EAAA,EAAKM,QAAN,CAAc1D,KAAK,OAAOiB,KAAK,SAAS4C,SAtDxD,SAA2B3B,GACzBuN,EAAcvN,EAAMG,OAAOC,MAAMwO,gBAqDkDlO,MAAO,CAAEmO,YAAa,QACzFpN,YAAY,+BAGlB,kBAACU,EAAA,EAAD,CAAQC,QAAQ,UAAUtE,KAAK,SAAS2C,UAAU,sBAChD+D,QAtDd,SAA0BxE,GAExB,GADAA,EAAMoB,iBArES,cAsEXgM,EACFH,EAAYO,QACP,GAAmB,KAAfF,EACTL,EAAYO,OACP,CACL,IAAMW,EAAK,GAEXX,EAAWsB,SAAQ,SAAAC,GACbA,EAAK3B,GAAcwB,cAAclB,SAASJ,EAAWsB,gBACvDT,EAAG5N,KAAKwO,MAIZ9B,EAAYkB,MAsCJ,aAMN,wBAAIzN,MAAO,CAAEO,UAAW,WAAxB,kDACA,kBAACF,EAAA,EAAD,KACGiM,EAASvG,OACR,kBAACuI,EAAA,EAAD,CAAOC,YAAU,EAACC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACC,KAAK,KAAK3O,MAAO,CAAEC,QAAS,MACnE,+BACE,4BACGjD,EAAQ2O,KAAI,SAACqC,EAAQC,GAAT,OACX,wBAAI9F,IAAK8F,EAAOlO,UAAU,KAAK6O,YAAWZ,EAAQlK,QAASuJ,EACzDwB,MAAM,MAAMC,SAAS,KAAKd,QAIlC,+BACG1B,EAASX,KAAI,SAACoD,EAASd,GAAV,OACZ,wBAAI9F,IAAK8F,GACNf,OAAOC,KAAK4B,GAASpD,KAAI,SAACqD,EAAQpI,GAAT,OACxB,wBAAIuB,IAAKvB,GAAImI,EAAQC,aAO7B,uD,QC5ICtR,eAJS,SAAAC,GAAK,MAAK,CAChCC,KAAMD,EAAMC,QAGCF,EArBM,SAAC,GAAD,IAAcuR,EAAd,EAAGC,UAAsBtR,EAAzB,EAAyBA,KAASuR,EAAlC,2CACnB,kBAAC,IAAD,iBACMA,EADN,CAEEC,OAAQ,SAAAvQ,GAAK,OACc,IAAzBjB,EAAKgC,gBACH,kBAACqP,EAAcpQ,GAEf,kBAAC,IAAD,CAAU0C,GAAG,kB,iBCVf8N,GAAUC,EAAQ,KAElBC,GAAe,CACjB3P,iBAAiB,EACjB4P,KAAM,GACNC,SAAS,GCLPF,GAAe,GCENG,eAAgB,CAC3B9R,KFKW,WAAyC,IAA/BD,EAA8B,uDAAtB4R,GAAcI,EAAQ,uCACnD,OAAQA,EAAOvS,MACX,IVVwB,mBUWpB,OAAO,2BACAO,GADP,IAEIiC,iBAAkByP,GAAQM,EAAOtS,SACjCmS,KAAMG,EAAOtS,UAErB,IVjBoB,eUkBhB,OAAO,2BACAM,GADP,IAEI8R,SAAS,IAEjB,QACI,OAAO9R,IElBfE,ODFW,WAAyC,IAA/BF,EAA8B,uDAAtB4R,GAAcI,EAAQ,uCACnD,OAAQA,EAAOvS,MACX,IXNkB,aWOd,OAAOuS,EAAOtS,QAClB,QACI,OAAOM,MEJbiS,GAAa,CAACC,MAEdC,GAAmB5D,OAAO6D,sCAAwCC,IAUzDC,GARDC,YACVC,GANiB,GAQjBL,GACIM,IAAe,WAAf,EAAmBR,MCKrB/S,I,OAAQ0B,KAAKkE,MAAMjF,aAAakF,QAAQ,cAG9C,GAAI7F,GAAO,CAETD,EAAaC,IAGb,IAAMM,GAAUsB,IAAW5B,IAG3BoT,GAAM1S,SAASL,EAAeC,KAG9B,IAAMkT,GAAcxE,KAAKyE,MAAQ,IAE7BnT,GAAQoT,IAAMF,KAEhBJ,GAAM1S,SAASD,KAEf4O,OAAOC,SAASjJ,KAAO,WAqBZsN,OAjBf,WACE,OACE,kBAAC,IAAD,CAAUP,MAAOA,IACf,kBAAC,IAAD,KACI,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOQ,OAAK,EAACC,KAAK,UAAS,kBAAC,EAAD,OAC3B,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,WAAU,kBAAC,EAAD,OAC5B,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,mBAAkB,kBAAC,EAAD,OACpC,kBAAC,EAAD,CAAcD,OAAK,EAACC,KAAK,uBAAuBxB,UAAWlD,IAC3D,kBAAC,EAAD,CAAcyE,OAAK,EAACC,KAAK,aAAaxB,UAAWvF,IACjD,kBAAC,IAAD,CAAO+G,KAAK,MAAK,kBAAC,EAAD,W,OC/C7BC,IAASvB,OAAO,kBAAC,GAAD,MAASwB,SAASC,eAAe,U,mBCLjDC,EAAOC,QAAU,IAA0B,uC,sCCA3CD,EAAOC,QAAU,IAA0B,oD","file":"static/js/main.ebd63bce.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst setAuthToken = token => {\n    if (token) {\n        // Apply authorization token to every request if logged in\n        axios.defaults.headers.common[\"Authorization\"] = token;\n    } else {\n        // Delete auth header\n        delete axios.defaults.headers.common[\"Authorization\"];\n    };\n};\n\nexport default setAuthToken;","import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from \"./types\";\n\n// Register User\nexport const registerUser = (userData, history) => dispatch => {\n    axios\n        .post(\"/api/user\", userData)\n        .then(res => history.push(\"/Login\")) // re-direct to login on successful register\n        .catch(err =>\n            dispatch({\n                type: GET_ERRORS,\n                payload: err.response.data\n            })\n        );\n};\n\n// Reset password for user\nexport const passwordReset = (userData, history) => dispatch => {\n    axios\n        .post(\"/api/user/forgotpassword\", userData)\n        .then(res => history.push(\"/Login\")) // re-direct to login on successful reset\n        .catch(err =>\n            dispatch({\n                type: GET_ERRORS,\n                payload: err.response.data\n            })\n        );\n};\n\n// Login - get user token\nexport const loginUser = userData => dispatch => {\n    axios\n        .post(\"/api/user/Login\", userData)\n        .then(res => {\n            // Save to localStorage\n            // Set token to localStorage\n            const { token, id, name } = res.data;\n\n            localStorage.setItem(\"jwtToken\", JSON.stringify(token));\n            localStorage.setItem(\"userID\", JSON.stringify(id));\n            localStorage.setItem(\"userName\", JSON.stringify(name));\n\n            // Set token to Auth header\n            setAuthToken(token);\n\n            // Decode token to get user data\n            const decoded = jwt_decode(token);\n\n            // Set current user\n            dispatch(setCurrentUser(decoded));\n        })\n        .catch(err =>\n            dispatch({\n                type: GET_ERRORS,\n                payload: err.response.data\n            })\n        );\n};\n\n// Set logged in user\nexport const setCurrentUser = decoded => {\n    return {\n        type: SET_CURRENT_USER,\n        payload: decoded\n    };\n};\n\n// User loading\nexport const setUserLoading = () => {\n    return {\n        type: USER_LOADING\n    };\n};\n\n// Log user out\nexport const logoutUser = () => dispatch => {\n    // Remove token from local storage\n    localStorage.removeItem(\"jwtToken\");\n    localStorage.removeItem(\"userID\")\n    localStorage.removeItem(\"userName\")\n\n    // Remove auth header for future requests\n    setAuthToken(false);\n\n    // Set current user to empty object {} which will set isAuthenticated to false\n    dispatch(setCurrentUser({}));\n};","export const GET_ERRORS = \"GET_ERRORS\";\nexport const USER_LOADING = \"USER_LOADING\";\nexport const SET_CURRENT_USER = \"SET_CURRENT_USER\";","import React, { useState, useEffect } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\n\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport Card from \"react-bootstrap/Card\";\nimport Image from \"react-bootstrap/Image\";\n\nimport { loginUser } from \"../actions/authActions\";\nimport backgroundImage from \"../images/ac512x512.png\";\n\nconst Login = (props) => {\n  const [formData, setFormData] = useState({\n    email: \"\",\n    password: \"\",\n    errors: {}\n  });\n\n  const history = useHistory();\n\n  useEffect(() => {\n    // If logged in and user navigates to Login page, should redirect them to Dashboard\n    if (props.auth.isAuthenticated) {\n      history.push(\"/Dashboard\");\n    }\n  });\n\n  useEffect(() => {\n    setFormData((prevState) => ({\n      ...prevState,\n      errors: props.errors\n    }));\n  }, [props.errors]);\n\n  function handleChange(event) {\n    event.persist();\n\n    setFormData((prevState) => ({\n      ...prevState,\n      [event.target.id]: event.target.value,\n      errors: {}\n    }))\n  };\n\n  function handleSubmit(event) {\n    event.preventDefault();\n\n    const userData = {\n      email: formData.email,\n      password: formData.password,\n    };\n    props.loginUser(userData);\n  };\n\n  const { errors } = formData;\n\n  return (\n    <>\n      <Image \n        className=\"d-block mx-auto img-fluid w-75\"\n        style={{ opacity: \"0.3\" }}\n        src={backgroundImage}\n        alt=\"Build A Base Logo\">\n      </Image>\n      <Card className=\"d-block mx-auto formCard\">\n        <Card.Body>\n          <h1 style={{ textAlign: \"center\" }}>Login</h1>\n          <hr />\n          <Form onSubmit={handleSubmit}>\n            <Form.Group controlId=\"email\">  \n              <Form.Label>Email</Form.Label>\n              <Form.Control\n                type=\"email\"\n                placeholder=\"Enter email\"\n                autoComplete=\"email\"\n                onChange={handleChange}\n                value={formData.email}\n                error={errors.email}\n                className={classnames(\"\", {\n                  invalid: errors.email || errors.emailnotfound\n                })}\n              />\n              <span className=\"red-text\">\n                {errors.email}\n                {errors.emailnotfound}\n              </span>\n            </Form.Group>\n\n            <Form.Group controlId=\"password\">\n              <Form.Label>Password</Form.Label>\n              <Form.Control\n                type=\"password\"\n                placeholder=\"Password\"\n                autoComplete=\"current-password\"\n                onChange={handleChange}\n                value={formData.password}\n                error={errors.password}\n                className={classnames(\"\", {\n                  invalid: errors.password || errors.passwordincorrect\n                })}\n              />\n              <span className=\"red-text\">\n                {errors.password}\n                {errors.passwordincorrect}\n              </span>\n            </Form.Group>\n\n            <Link to=\"/ForgotPassword\">Forgot Password?</Link>\n            <Link to=\"/SignUp\" style={{ float: \"right\" }}>New User?</Link>\n            <hr />\n            <Button className=\"d-block mx-auto\" variant=\"success\" type=\"submit\">\n              Login\n            </Button>\n          </Form>\n        </Card.Body>\n      </Card>\n    </>\n  );\n};\n\nLogin.propTypes = {\n  loginUser: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired,\n  errors: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  errors: state.errors\n});\n\nexport default connect(\n  mapStateToProps,\n  { loginUser }\n)(Login);","import React, { useState, useEffect } from \"react\";\nimport { Link, withRouter, useHistory } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\n\nimport Form from \"react-bootstrap/Form\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport Card from \"react-bootstrap/Card\";\nimport Image from \"react-bootstrap/Image\";\n\nimport { registerUser } from \"../actions/authActions\";\nimport backgroundImage from \"../images/ac512x512.png\";\n\nconst SignUp = (props) => {\n  const [formData, setFormData] = useState({\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    password: \"\",\n    password2: \"\",\n    errors: {}\n  });\n\n  const history = useHistory();\n  \n  useEffect(() => {\n    // If logged in and user navigates to SignUp page, should redirect them to Dashboard\n    if (props.auth.isAuthenticated) {\n      history.push(\"/Dashboard\");\n    }\n  });\n\n  useEffect(() => {\n    setFormData((prevState) => ({\n      ...prevState,\n      errors: props.errors\n    }));\n  }, [props.errors]);\n\n  function handleChange(event) {\n    event.persist();\n\n    setFormData((prevState) => ({\n      ...prevState,\n      [event.target.id]: event.target.value,\n      errors: {}\n    }))\n  };\n\n  function handleSubmit(event) {\n    event.preventDefault();\n\n    const newUser = {\n      firstName: formData.firstName,\n      lastName: formData.lastName,\n      email: formData.email,\n      password: formData.password,\n      password2: formData.password2\n    };\n\n    props.registerUser(newUser, props.history);\n  };\n\n  const { errors } = formData;\n\n  return (\n    <>\n      <Image \n        className=\"d-block mx-auto img-fluid w-75\"\n        style={{ opacity: \"0.3\" }}\n        src={backgroundImage}\n        alt=\"Build A Base Logo\">\n      </Image>\n      <Card className=\"d-block mx-auto formCard\">\n        <Card.Body>\n          <Link to=\"/Login\" style={{ float: \"right\", color: \"black\" }}>x</Link>\n          <h1 style={{ textAlign: \"center\" }}>Sign Up</h1>\n          <hr />\n          <Form onSubmit={handleSubmit}>\n          <Form.Row>\n              <Form.Group as={Col} controlId=\"firstName\">\n                <Form.Label>First Name</Form.Label>\n                <Form.Control\n                  type=\"firstName\"\n                  placeholder=\"First Name\"\n                  autoComplete=\"fname\"\n                  onChange={handleChange}\n                  value={formData.firstName}\n                  error={errors.firstName}\n                  className={classnames(\"\", {\n                    invalid: errors.firstName\n                  })}\n                />\n                <span className=\"red-text\">{errors.firstName}</span>\n              </Form.Group>\n\n              <Form.Group as={Col} controlId=\"lastName\">\n                <Form.Label>Last Name</Form.Label>\n                <Form.Control\n                  type=\"lastName\"\n                  placeholder=\"Last Name\"\n                  autoComplete=\"lname\"\n                  onChange={handleChange}\n                  value={formData.lastName}\n                  error={errors.lastName}\n                  className={classnames(\"\", {\n                    invalid: errors.lastName\n                  })}\n                />\n                <span className=\"red-text\">{errors.lastName}</span>\n              </Form.Group>\n            </Form.Row>\n\n            <Form.Row>\n              <Form.Group as={Col} controlId=\"email\">\n                <Form.Label>Email</Form.Label>\n                <Form.Control\n                  type=\"email\"\n                  placeholder=\"Enter email\"\n                  onChange={handleChange}\n                  autoComplete=\"email\"\n                  value={formData.email}\n                  error={errors.email}\n                  className={classnames(\"\", {\n                    invalid: errors.email\n                  })}\n                />\n                <span className=\"red-text\">{errors.email}</span>\n                <Form.Text className=\"text-muted\">\n                  We'll never share your email with anyone else.\n                </Form.Text>\n              </Form.Group>\n            </Form.Row>\n\n            <Form.Row>\n              <Form.Group as={Col} controlId=\"password\">\n                <Form.Label>Password</Form.Label>\n                <Form.Control\n                  type=\"password\"\n                  placeholder=\"Password\"\n                  autoComplete=\"new-password\"\n                  onChange={handleChange}\n                  value={formData.password}\n                  error={errors.password}\n                  className={classnames(\"\", {\n                    invalid: errors.password\n                  })}\n                />\n                <span className=\"red-text\">{errors.password}</span>\n              </Form.Group>\n            </Form.Row>\n\n            <Form.Row>\n              <Form.Group as={Col} controlId=\"password2\">\n                <Form.Label>Confirm Password</Form.Label>\n                <Form.Control\n                  type=\"password\"\n                  placeholder=\"Confirm Password\"\n                  autoComplete=\"new-password\"\n                  onChange={handleChange}\n                  value={formData.password2}\n                  error={errors.password2}\n                  className={classnames(\"\", {\n                    invalid: errors.password2\n                  })}\n                />\n                <span className=\"red-text\">{errors.password2}</span>\n              </Form.Group>\n            </Form.Row>\n            <hr />\n            <Button className=\"d-block mx-auto\" variant=\"success\" type=\"submit\">\n              Create Account\n            </Button>          \n          </Form>\n        </Card.Body>\n      </Card>\n    </>\n  );\n};\n\nSignUp.propTypes = {\n  registerUser: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired,\n  errors: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  errors: state.errors\n});\n\nexport default connect(\n  mapStateToProps,\n  { registerUser }\n)(withRouter(SignUp));","import React, { useState, useEffect } from \"react\";\nimport { Link, withRouter, useHistory } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport classnames from \"classnames\";\n\nimport Form from \"react-bootstrap/Form\"\nimport Button from \"react-bootstrap/Button\"\nimport Card from \"react-bootstrap/Card\";\nimport Image from \"react-bootstrap/Image\";\n\nimport backgroundImage from \"../images/ac512x512.png\";\nimport { passwordReset } from \"../actions/authActions\";\n\nconst ForgotPassword = (props) => {\n  const [formData, setFormData] = useState({\n    email: \"\",\n    password: \"\",\n    password2: \"\",\n    errors: {}\n  });\n\n  const history = useHistory();\n\n  useEffect(() => {\n    // If logged in and user navigates to ForgotPassword page, should redirect them to dashboard\n    if (props.auth.isAuthenticated) {\n      history.push(\"/Dashboard\");\n    }\n  })\n\n  useEffect(() => {\n    setFormData((prevState) => ({\n      ...prevState,\n      errors: props.errors\n    }));\n  }, [props.errors])\n\n  function handleChange(event) {\n    event.persist();\n\n    setFormData((prevState) => ({\n      ...prevState,\n      [event.target.id]: event.target.value,\n      errors: {}\n    }))\n  };\n\n  function handleSubmit(event) {\n    event.preventDefault();\n\n    const forgotPassword = {\n      email: formData.email,\n      password: formData.password,\n      password2: formData.password2\n    };\n\n    props.passwordReset(forgotPassword, props.history);\n  };\n\n  const { errors } = formData;\n\n  return (\n    <>\n      <Image \n        className=\"d-block mx-auto img-fluid w-75\"\n        style={{ opacity: \"0.3\" }}\n        src={backgroundImage}\n        alt=\"Build A Base Logo\">\n      </Image>\n      <Card className=\"d-block mx-auto formCard\">\n        <Card.Body>\n          <Link to=\"/Login\" style={{ float: \"right\", color: \"black\" }}>x</Link>\n          <h1 style={{ textAlign: \"center\" }}>Reset Password</h1>\n          <hr />\n          <Form onSubmit={handleSubmit}>\n            <Form.Group controlId=\"email\">\n              <Form.Label>Email</Form.Label>\n              <Form.Control\n                type=\"email\"\n                placeholder=\"Enter email\"\n                autoComplete=\"email\"\n                onChange={handleChange}\n                value={formData.email}\n                error={errors.email}\n                className={classnames(\"\", {\n                  invalid: errors.email || errors.emailnotfound\n                })}\n              />\n              <span className=\"red-text\">\n                {errors.email}\n                {errors.emailnotfound}\n              </span>\n            </Form.Group>\n\n            <Form.Group controlId=\"password\">\n              <Form.Label>Password</Form.Label>\n              <Form.Control\n                type=\"password\"\n                placeholder=\"Password\"\n                autoComplete=\"current-password\"\n                onChange={handleChange}\n                value={formData.password}\n                error={errors.password}\n                className={classnames(\"\", {\n                  invalid: errors.password\n                })}\n              />\n              <span className=\"red-text\">{errors.password}</span>\n            </Form.Group>\n\n            <Form.Group controlId=\"password2\">\n              <Form.Label>Confirm Password</Form.Label>\n              <Form.Control\n                type=\"password\"\n                placeholder=\"Confirm Password\"\n                autoComplete=\"new-password\"\n                onChange={handleChange}\n                value={formData.password2}\n                error={errors.password2}\n                className={classnames(\"\", {\n                  invalid: errors.password2\n                })}\n              />\n              <span className=\"red-text\">{errors.password2}</span>\n            </Form.Group>\n\n            <hr />\n            <Button className=\"d-block mx-auto\" variant=\"success\" type=\"submit\">\n              Save Password\n            </Button>\n          </Form>\n        </Card.Body>\n      </Card>\n    </>\n  )\n};\n\nForgotPassword.propTypes = {\n  passwordReset: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired,\n  errors: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  errors: state.errors\n});\n\nexport default connect(\n  mapStateToProps,\n  { passwordReset }\n)(withRouter(ForgotPassword));\n","import React, { useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\n\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Nav from \"react-bootstrap/Nav\";\n\nimport { logoutUser } from \"../../actions/authActions\";\nimport Logo from \"../../images/android-chrome-192x192.png\";\n\nfunction NavBar(props) {\n  const userName = JSON.parse(localStorage.getItem(\"userName\"));\n\n  const history = useHistory();\n\n  function handleLogoutClick(event) {\n    event.preventDefault();\n    props.logoutUser();\n    history.push(\"/Login\");\n  };\n\n  useEffect(() => {\n    if (!props.auth.isAuthenticated) {\n      history.push(\"/Login\")\n    }\n  }, [history, props.auth.isAuthenticated]); // Causes runtime warning without including history\n\n  return (\n    <>\n      {/* <Navbar fixed=\"top\" expand=\"lg\" bg=\"dark\" variant=\"dark\"> */}\n      <Navbar style={{ height: \"10%\" }} sticky=\"top\" collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand href=\"/Dashboard\" className=\"align-middle\" style={{ display: \"flex\", alignItems: \"center\" }}>\n          <img\n            src={Logo}\n            width=\"87\"\n            height=\"73\"\n            className=\"d-inline-block align-top\"\n            alt=\"Build A Base Logo\"\n          />\n          {/* <Image \n            style={{ width: \"87px\", height: \"73px\" }} \n            src={Logo} \n            alt=\"Logo\"\n            fluid>\n          </Image> */}\n        </Navbar.Brand>\n        <Navbar.Toggle />\n        <Navbar.Collapse className=\"justify-content-end\">\n          <Nav className=\"mx-auto\">\n            <Navbar.Text style={{ fontStyle: \"italic\" }}>\n              Welcome, {userName}\n            </Navbar.Text>\n            <Nav.Link href=\"/Dashboard\" style={{ marginTop: \"15px\", marginBottom: \"15px\" }}>Dashboard</Nav.Link>\n            <Nav.Link style={{ marginTop: \"15px\", marginBottom: \"15px\" }} onClick={handleLogoutClick}>Logout</Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n    </>\n  );\n};\n\nNavBar.propTypes = {\n  logoutUser: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth\n});\n\nexport default connect(mapStateToProps, { logoutUser })(NavBar);","import axios from \"axios\";\n\nexport default {\n\n  getOneUser: function(email) {\n    return axios.get(\"/api/user/\" + email);\n  },\n\n  createUser: function(userData) {\n    return axios.post(\"/api/user\", userData);\n  },\n\n  updateUser: function(userData) {\n    return axios.put(\"/api/user\", userData);\n  },\n\n  getBasesByUser: function(id) {\n    return axios.get(\"/api/base/id/\" + id);\n  },\n\n  getBaseByName: function(name) {\n    return axios.get(\"/api/base/name/\" + name)\n  },\n\n  createBase: function(baseData) {\n    return axios.post(\"/api/base\", baseData);\n  },\n\n  updateBase: function(baseData) {\n    return axios.put(\"/api/base\", baseData);\n  },\n\n  deleteBase: function(name) {\n    return axios.delete(\"/api/base/name/\" + name);\n  },\n\n  getCustom: async function(baseName) {\n    const response = await this.getBaseByName(baseName)\n      if (response.data) {\n        const res = axios.patch(\"/api/custom/\" + baseName, response.data.model) // Has to be patch so we can send model through body.data\n        return res\n      }\n      else { return [] }\n  },\n\n  createCustom: function(baseName, baseModel, baseData) {\n    return axios.post(\"/api/custom/\" + baseName, { model: baseModel, data: baseData });\n  },\n\n  updateCustom: async function(baseName, baseData) {\n    const response = await this.getBaseByName(baseName);\n    if (!response.data) { return response }\n    return axios.put(\"/api/custom/\" + baseName, { model: response.data.model, data: baseData });\n  },\n\n  deleteCustom: async function(baseName, id) {\n    const response = await this.getBaseByName(baseName);\n    if (!response.data) { return response }\n    return axios.patch(\"/api/custom/\" + baseName + \"/\" + id, response.data.model); // Has to be patch so we can send model through body.data\n  }\n};","import XLSX from \"xlsx\";\nimport API from \"./API\";\n\n// Helper function - makes sure name for new collection is unique\n// If name is found, add \"1\" to end. If that is found, change \"1\" to \"2\", and so on\nconst getUniqueBaseName = async function(baseName, counter) {\n  return new Promise(async function(resolve, reject) {\n    let newBaseName = baseName;\n    let ctr = counter;\n    let success = true;\n\n    try {\n      await API.getBaseByName(newBaseName)\n      .then( async response => {\n        if (response.data) {\n          // If we've already done an iteration, need to remove old number\n          if (ctr > 0) {\n            newBaseName = newBaseName.slice(0, newBaseName.length - 1);\n          };\n  \n          ctr++;\n          newBaseName = newBaseName + (ctr).toString(); \n          await getUniqueBaseName(newBaseName, ctr)\n          .then(response => {\n            newBaseName = response;\n          });\n        };\n      });\n    }\n    catch(error) {\n      success = false;\n      reject(error);\n    }\n    finally {\n      if (success) {\n        resolve(newBaseName);\n      };\n    };\n  });\n};\n\n// Reads spreadsheet in fileName, returns new collection (base) name\nconst readSpreadsheet = async function(fileName) {\n  return new Promise((resolve, reject) => {\n    let reader = new FileReader();\n    let success = true;\n    let workbook;\n    let result = \"\";\n\n    // Gets executed when readAsBinaryString (called below) is complete\n    reader.onload = async function(event) {\n\n      // Sets all key values in header cell object\n      function updateHeaderCellObject(value) {\n        return { t: \"s\", v: value, r: \"<t>\" + value + \"</t>\", h: value, w: value }\n      };\n\n      // Next cell label, eg: A1:B1, Z2:AA2, ABC10:ABD10, ABZ100:ACA100, AZZ1000:BAA1000\n      function nextCell(cell) {\n        let next = \"\";\n        // Work from right end of cell name back to first position; skip numbers at end\n        for (let i=(cell.length-1); i >= 0; i--) {\n          if (/\\d/.test(cell[i])) {\n            next = cell[i] + next;\n          }\n          else if (cell[i] === \"Z\") { \n            next = \"A\" + next;\n            if (i === 0) {\n              next = \"A\" + next;\n            };\n          }\n          else {\n            next = String.fromCharCode(cell.charCodeAt(i) + 1) + next;\n            if (i > 0) {\n              next = cell.substring(0,i) + next;\n            }\n            break;\n          };\n        };\n        return next;\n      };\n\n      try {\n        // If we don't format dates, they come in as 5 digit numbers; default format is mm/dd/yy\n        workbook = XLSX.read(event.target.result, {type: \"binary\", cellDates: true, dateNF:'yyyy\"-\"mm\"-\"dd' });\n\n        // For MVP, we are only handling first sheet in a multi-sheet workbook;\n        // Also assuming that there is a header row\n        if (workbook.SheetNames.length > 0) {\n          const worksheet = workbook.Sheets[workbook.SheetNames[0]];\n\n          // worksheet object has !ref key which indicates the first and last cells of data\n          const ref = worksheet[\"!ref\"]; \n          let i = 1; // Running count of columns in case we have a blank column header\n          let firstRowNum =  parseInt(ref.substring(1)); // Extract first row number\n          let currentCell = ref[0] + firstRowNum.toString(); // Cell to start reading\n          let startSecondRow = ref[0] + (firstRowNum + 1).toString(); // When we reach cell in 2nd row, done reading headers\n\n          // Loop over headers\n          // Need to ensure none begin with \"$\" or contain \".\", or are null\n          // These will be the field names in MongoDB, and those are illegal characters\n          for (let key in worksheet) {\n            if (key === startSecondRow) { break; }; // When we reach startSecondRow, we are done with headers\n            if (key[0] === \"!\") { continue; }; // If key begins with \"!\", it is informational only\n\n            // Set empty column headers; XLSX defaults to __EMPTY\n            if (key !== currentCell) {\n              worksheet[currentCell] = updateHeaderCellObject(\"Column\" + i.toString());\n              currentCell = nextCell(currentCell);\n            };\n\n            // Set blank column headers\n            if (worksheet[key].v.trim() === \"\") { \n              worksheet[key] = updateHeaderCellObject(\"Column\" + i.toString()); // Set blank column headers\n            }\n            else {\n              worksheet[key] = updateHeaderCellObject(worksheet[key].v.replace(/\\./g, \"\").trim()); // Remove all \".\" and extra spaces\n  \n              if (worksheet[key].v[0] === \"$\") {\n                worksheet[key] = updateHeaderCellObject(worksheet[key].v.substring(1)); // Remove \"$\" if in first position\n              };\n            };\n\n            i++; // Running count of columns in case we have a blank column header\n            currentCell = nextCell(currentCell); // Keeping track of which cell should be next\n          };\n\n          // If defval is not specified, null and undefined values are skipped\n          let jsonData = XLSX.utils.sheet_to_json(worksheet, { raw:false, defval:\"\" });\n\n          // Verify that we actually got data, then create model for new collection\n          if (jsonData.length > 0) {\n            let firstDataRow = jsonData[0];\n            let baseModel = [];\n            let newField;\n\n            // Create pairs of field name and field type for model\n            for (let key in firstDataRow) {\n              newField = { fieldName: key, fieldType: \"String\" };\n\n              // Make sure cell data is not null or undefined\n              if (firstDataRow[key]) {\n                if (typeof firstDataRow[key] === \"number\") {\n                  newField.fieldType = \"Number\";\n                }\n                else if ((typeof firstDataRow[key] === \"string\") &&\n                        (firstDataRow[key].substr(0,10).match(/^\\d{4}-\\d{2}-\\d{2}$/))) {\n                  newField.fieldType = \"Date\";\n                };\n              };\n\n              baseModel.push(newField);\n            };\n\n            // New collection name: start with file name, remove extension\n            // Then, remove anything but letters and numbers, make camel case\n            // Can't start with a number - add \"n\" to front if it does\n            let fn = fileName.name.substring(0, fileName.name.lastIndexOf(\".\"));\n            let newBaseName = \"\";\n            let needCap = false;\n\n            for (let i=0; i<fn.length; i++) {\n              // Check for alphanumeric\n              if (/[\\w]|_/g.test(fn[i])) {\n                // If first character in base name and it's a number, add an \"n\"\n                if ((newBaseName.length === 0) && (/\\d/g.test(fn[i]))) {\n                  newBaseName = \"n\";\n                };\n\n                if (needCap) {\n                  newBaseName = newBaseName + fn[i].toUpperCase();\n                  needCap = false;\n                }\n                else {\n                  newBaseName = newBaseName + fn[i];\n                };\n              }\n              else {\n                needCap = true; // Skip non-alphanumeric characters; next alphanumeric needs to be capitalized\n              };\n            };\n\n            await getUniqueBaseName(newBaseName, 0)\n            .then( async response => {\n              const newBase = {\n                creatorID: JSON.parse(localStorage.getItem(\"userID\")),\n                baseName: response,\n                baseTitle: fn,\n                model: baseModel\n              };\n\n              // Add entry to Bases collection, then add records to new custom collection\n              await API.createBase(newBase)\n              .then(() => { \n                return API.createCustom(newBase.baseName, newBase.model, jsonData);\n              })\n              .then(() => { result = newBase.baseName })\n              .catch( async error => {\n                // If payload too large, add one row at a time; any other error, delete entry in Bases collection\n                if (error.response.status === 413) {\n                  for (let i=0; i<jsonData.length; i++) {\n                    API.createCustom(newBase.baseName, newBase.model, jsonData[i]);\n                  };\n                }\n                else {\n                  await API.deleteBase(newBase.baseName)\n                  .then(() => { throw error }); // Pass error on to caller\n                };\n              });\n            });\n          } // end jsonData.length > 0\n          else {\n            throw new Error(\"Error converting spreadsheet data\");\n          };\n        } // end workbook.SheetNames.length > 0\n        else {\n          throw new Error(\"No data in spreadsheet\");\n        };\n      } // end try\n      catch(error) {\n        success = false;\n        reject(error);\n      }\n      finally {\n        if (success) {\n          resolve(result);\n        };\n      };\n    }; // end reader.onload\n\n    // Promise resovle/reject handled in onload event handler\n    reader.readAsBinaryString(fileName);\n  }); // end Promise\n};\n\nexport default readSpreadsheet;","import React, { useState, useEffect } from \"react\";\n\nimport { Image, Modal, Form, Button, Container, Row, Col, Card, CardColumns } from \"react-bootstrap\";\n\nimport NavBar from \"../components/NavBar\";\nimport backgroundImage from \"../images/ac512x512.png\";\nimport API from \"../utils/API\"\nimport readSpreadsheet from \"../utils/readSpreadsheet\";\n\n\nconst Dashboard = () => {\n  const [showAlert, setShowAlert] = useState(false);\n  const [alertMessage, setAlertMessage] = useState(\"\");\n  const [showImport, setShowImport] = useState(false);\n  const [fileName, setFileName] = useState(null);\n  const [databases, setDatabases] = useState([{ baseName: \"default\" }]);\n\n  useEffect(() => {\n    getDBs()\n  }, [])\n\n  async function getDBs() {\n    await API.getBasesByUser(JSON.parse(localStorage.getItem(\"userID\")))\n      .then(response => {\n        setDatabases(response.data);\n      })\n      .catch(() => { return [] });\n  };\n\n  const handleCloseAlert = () => {\n    setAlertMessage(\"\");\n    setShowAlert(false);\n  };\n\n  const handleShowImport = () => setShowImport(true);\n  const handleCloseImport = () => {\n    setFileName(null);\n    setShowImport(false);\n  };\n\n  const handleFileSelect = () => {\n    setShowImport(false);\n\n    if (fileName) {\n      readSpreadsheet(fileName)\n        .then(response => {\n          getDBs();\n        })\n        .catch(error => {\n          console.log(\"Error reading file: \", error);\n          \n          // Errors come back as different types of objects\n          let msg = \"\";\n          if (error.message) {\n            msg = \": \" + error.message;\n          }\n          else if ((error.response) && (error.response.statusText)) {\n            msg = \": \" + error.response.statusText;\n          };\n\n          setAlertMessage(\"Error importing \" + fileName.name + msg);\n          setShowAlert(true);\n        });\n    }\n    else {\n      setAlertMessage(\"No file selected.\");\n      setShowAlert(true);\n    };\n\n    setFileName(null);\n  };\n\n  const fileNameChange = (event) => {\n    if (event.target.files.length > 0) {\n      setFileName(event.target.files[0]);\n    };\n  };\n\n  return (\n    <>\n      <NavBar />\n      <Image\n        className=\"d-block mx-auto img-fluid w-75\"\n        style={{ opacity: \"0.3\" }}\n        src={backgroundImage}\n        alt=\"Build A Base Logo\">\n      </Image>\n\n      {/* Modal for alerts */}\n      <Modal\n        show={showAlert}\n        onHide={handleCloseAlert}\n        aria-labelledby=\"alert-modal\"\n        centered\n        style={{ opacity: 1 }}>\n\n        <Modal.Header closeButton>\n          <Modal.Title>Build-A-Base Alert:</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>{alertMessage}</Modal.Body>\n        <Modal.Footer style={{ display: \"flex\", justifyContent: \"center\" }}>\n          <Button variant=\"success\" onClick={handleCloseAlert}>\n            Close\n          </Button>\n        </Modal.Footer>\n      </Modal>\n\n      {/* Modal for importing spreadsheets */}\n      <Modal\n        show={showImport}\n        onHide={handleCloseImport}\n        aria-labelledby=\"import-modal\"\n        centered\n        style={{ opacity: 1 }}>\n\n        <Modal.Header closeButton>\n          <Modal.Title id=\"import-modal\">Import Spreadsheet</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Form>\n            <Form.Group>\n              <Form.File id=\"fileToImportSelector\" label=\"Select file to import\" onChange={fileNameChange} />\n            </Form.Group>\n          </Form>\n        </Modal.Body>\n        <Modal.Footer style={{ display: \"flex\", justifyContent: \"center\" }}>\n          <Button variant=\"success\" onClick={handleFileSelect}>\n            Import\n          </Button>\n        </Modal.Footer>\n      </Modal>\n\n      <Container className=\"d-block mx-auto\" style={{ marginTop: \"-70%\", width: \"80%\" }}>\n        <Row>\n          <Col>\n            <h1 className=\"float-left\">Your Databases</h1>\n          </Col>\n          <Col>\n            <Button\n              className=\"float-right\"\n              variant=\"success\"\n              style={{ marginTop: \"20px\" }}\n              onClick={handleShowImport}>\n              Import\n            </Button>\n          </Col>\n        </Row>\n        <CardColumns>\n          {databases.map(base => (\n            <Card key={base.baseName} className=\"p-3\" bg=\"info\">\n              <Card.Link href={`/BaseTable/${base.baseName}`} style={{ color:\"white\" }}>\n                <Card.Title className=\"font-weight-bold\">{base.baseTitle}</Card.Title>\n                <Card.Text className=\"font-weight-lighter\">{base.baseName}</Card.Text>\n                <Card.Text className=\"font-weight-lighter font-italic\">\n                  Created on: {(new Date(base.creationDate)).toLocaleDateString()}\n                </Card.Text>\n              </Card.Link>\n            </Card>\n          ))}\n        </CardColumns>\n      </Container>\n    </>\n  )\n};\n\nexport default Dashboard;","import React, { useState, useEffect } from \"react\";\nimport { Container, Table, Form, Col, Button, Card } from \"react-bootstrap\";\nimport Image from \"react-bootstrap/Image\";\n\nimport NavBar from \"../components/NavBar\";\nimport API from \"../utils/API\";\nimport backgroundImage from \"../images/ac512x512.png\";\nimport \"./BaseTable.css\";\n\nconst BaseTable = () => {\n  const dbName = window.location.pathname.split(\"/\")[2]\n  const [dataList, setDataList] = useState(\"\");\n  // Dummy state, used to force re-render\n  const [updateView, setUpdateView] = useState(0);\n\n  // Which filter is selected\n  const noFilter = \"No filter\";\n  const [filterSelect, setFilterSelect] = useState(noFilter);\n  const [filterData, setFilterData] = useState(\"\");\n  const [unfiltered, setUnfiltered] = useState(\"\")\n\n  // Load header array\n  let headers = [];\n  for (let key in dataList[0]) {\n    if (!key.includes(\"_EMPTY\")) {\n      headers.push(key);\n    }\n  };\n\n  useEffect(() => {\n    getDataList(dbName)\n  }, [dbName]);\n\n  async function getDataList(baseName) {\n    await API.getCustom(baseName)\n      .then(response => {\n        for (let i = 0; i < response.data.length; i++) {\n          for (let k = 0; k < Object.keys(response.data[i]).length; k++) {\n            if (Object.keys(response.data[i])[k].startsWith(\"_\")) {\n              let key = Object.keys(response.data[i])[k]\n\n              delete response.data[i][key]\n            }\n          }\n        }\n\n        setDataList(response.data)\n        setUnfiltered(response.data)\n      })\n      .catch(() => { return [] });\n  };\n\n  function onColumnClick(event) {\n    const colName = event.target.dataset.text;\n    const dl = dataList; // Need to work with copy to use sort\n\n    function compareItems(item1, item2) {\n      if (!isNaN(item1)) {\n        item1 = parseInt(item1)\n        item2 = parseInt(item2)\n      }\n\n      if (item1 < item2) { return -1 }\n      else if (item1 > item2) { return 1 }\n      else { return 0 };\n    };\n\n    dl.sort((a, b) => { return compareItems(a[colName], b[colName]) });\n\n    setDataList(dl);\n    setUpdateView(updateView + 1);\n  };\n\n  // Update component state when user selects column to filter on\n  function handleSelectChange(event) {\n    setFilterSelect(event.target.value);\n  };\n\n  // Handles updating component state when the user types into the input field\n  function handleInputChange(event) {\n    setFilterData(event.target.value.toLowerCase());\n  };\n\n  // When the form is submitted, load books matching the entered keyword(s)\n  function handleFormSubmit(event) {\n    event.preventDefault();\n    if (filterSelect === noFilter) {\n      setDataList(unfiltered);\n    } else if (filterData === \"\") {\n      setDataList(unfiltered);\n    } else {\n      const dl = [];\n\n      unfiltered.forEach(item => {\n        if (item[filterSelect].toLowerCase().includes(filterData.toLowerCase())) {\n          dl.push(item);\n        }\n      });\n\n      setDataList(dl);\n    };\n  };\n\n  return (\n    <>\n      <NavBar />\n      <Image\n        className=\"d-block mx-auto img-fluid w-75\"\n        style={{ opacity: \"0.3\" }}\n        src={backgroundImage}\n        alt=\"Build A Base Logo\">\n      </Image>\n\n      <Container className=\"d-block mx-auto container\" style={{ marginTop: \"-70%\", width: \"80%\" }}>\n        <h1 className=\"h1\">{dbName}</h1>\n        <span style={{ display: \"none\" }}>{updateView}</span>\n\n        <Card className=\"d-block mx-auto form\">\n          <Card.Body>\n            <Form>\n              <h4 style={{ marginBottom: \"20px\" }}>Filter Data</h4>\n              <Form.Row>\n                <Form.Group as={Col} controlId=\"formFilter.ControlSelect\">\n                  <Form.Label>Column to filter on:</Form.Label>\n                  <Form.Control as=\"select\" onChange={handleSelectChange} style={{ height: \"50px\" }}>\n                    <option key={0} value={noFilter}>{noFilter}</option>\n                    {headers.map((header, index) => (\n                      <option key={index + 1} value={header}>{header}</option>\n                    ))}\n                  </Form.Control>\n                </Form.Group>\n                <Form.Group as={Col} controlId=\"formFilter.ControlInput\">\n                  <Form.Label>Value to filter on:</Form.Label>\n                  <Form.Control type=\"text\" name=\"filter\" onChange={handleInputChange} style={{ paddingLeft: \"10px\" }}\n                    placeholder=\"Enter value to filter on\" />\n                </Form.Group>\n              </Form.Row>\n              <Button variant=\"success\" type=\"submit\" className=\"float-right formBtn\"\n                onClick={handleFormSubmit}>Filter</Button>\n            </Form>\n          </Card.Body>\n        </Card>\n\n        <h4 style={{ textAlign: \"center\" }}>Click on column heading to sort by that column</h4>\n        <Card>\n          {dataList.length ? (\n            <Table responsive striped bordered hover size=\"sm\" style={{ opacity: \"1\" }}>\n              <thead>\n                <tr>\n                  {headers.map((header, index) => (\n                    <th key={index} className=\"th\" data-text={header} onClick={onColumnClick}\n                      scope=\"col\" tabIndex=\"0\">{header}</th>\n                  ))}\n                </tr>\n              </thead>\n              <tbody>\n                {dataList.map((objData, index) => (\n                  <tr key={index}>\n                    {Object.keys(objData).map((objKey, i) => (\n                      <td key={i}>{objData[objKey]}</td>\n                    ))}\n                  </tr>\n                ))}\n              </tbody>\n            </Table>\n          ) : (\n              <h5>No data to display</h5>\n            )}\n        </Card>\n      </Container>\n    </>\n  )\n};\n\nexport default BaseTable;","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nconst PrivateRoute = ({ component: Component, auth, ...rest }) => (\n  <Route\n    {...rest}\n    render={props =>\n      auth.isAuthenticated === true ? (\n        <Component {...props} />\n      ) : (\n        <Redirect to=\"/Login\" />\n      )\n    }\n  />\n);\n\nPrivateRoute.propTypes = {\n  auth: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth\n});\n\nexport default connect(mapStateToProps)(PrivateRoute);","import { SET_CURRENT_USER, USER_LOADING } from \"../actions/types\";\n\nconst isEmpty = require(\"is-empty\");\n\nconst initialState = {\n    isAuthenticated: false,\n    user: {},\n    loading: false\n};\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case SET_CURRENT_USER:\n            return {\n                ...state,\n                isAuthenticated: !isEmpty(action.payload),\n                user: action.payload\n            };\n        case USER_LOADING:\n            return {\n                ...state,\n                loading: true\n            };\n        default:\n            return state;\n    };\n};","import { GET_ERRORS } from \"../actions/types\";\n\nconst initialState = {};\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case GET_ERRORS:\n            return action.payload;\n        default:\n            return state;\n    };\n};","import { combineReducers } from \"redux\";\nimport authReducer from \"./authReducers\";\nimport errorReducer from \"./errorReducers\";\n\nexport default combineReducers({\n    auth: authReducer,\n    errors: errorReducer\n});","import { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers\";\n\nconst initialState = {};\nconst middleware = [thunk];\n// If user does not have redux dev tools installed, need to use plain compose\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n    rootReducer,\n    initialState,\n    composeEnhancers(\n        applyMiddleware(...middleware),\n    )\n);\n\nexport default store;","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { Provider } from \"react-redux\"\nimport jwt_decode from \"jwt-decode\";\n\nimport Login from \"./pages/Login\";\nimport SignUp from \"./pages/SignUp\";\nimport ForgotPassword from \"./pages/ForgotPassword\";\nimport Dashboard from \"./pages/Dashboard\";\nimport BaseTable from \"./pages/BaseTable\"\n\nimport setAuthToken from \"./utils/setAuthToken\";\nimport { setCurrentUser, logoutUser } from \"./actions/authActions\";\nimport PrivateRoute from \"./components/private-route/PrivateRoute\";\nimport store from \"./store\"\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nconst token = JSON.parse(localStorage.getItem(\"jwtToken\"));\n\n// Check for token to keep user logged in\nif (token) {\n  // Set auth token header auth\n  setAuthToken(token);\n\n  // Decode token and get user info and exp\n  const decoded = jwt_decode(token);\n\n  // Set user and isAuthenticated\n  store.dispatch(setCurrentUser(decoded));\n\n  // Check for expired token\n  const currentTime = Date.now() / 1000; // to get in milliseconds\n\n  if (decoded.exp < currentTime) {\n    // Logout user\n    store.dispatch(logoutUser());\n    // Redirect to login\n    window.location.href = \"./Login\";\n  }\n};\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Router>\n          <Switch>\n            <Route exact path=\"/Login\"><Login /></Route>\n            <Route exact path=\"/SignUp\"><SignUp /></Route>\n            <Route exact path=\"/ForgotPassword\"><ForgotPassword /></Route>\n            <PrivateRoute exact path=\"/BaseTable/:basename\" component={BaseTable} />\n            <PrivateRoute exact path=\"/Dashboard\" component={Dashboard} />\n            <Route path=\"/*\"><Login /></Route>\n          </Switch>\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","module.exports = __webpack_public_path__ + \"static/media/ac512x512.2a577ff4.png\";","module.exports = __webpack_public_path__ + \"static/media/android-chrome-192x192.b24a016b.png\";"],"sourceRoot":""}